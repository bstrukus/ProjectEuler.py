#!/usr/bin/env python3

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

from problems.baseProblem import BaseProblem

# This isn't the correct value if we wanted to find the sum of the even-valued terms for the first 
# 10 Fibonacci numbers, we'd want that to be 100

exampleValue = 100
problemValue = 4000000

class Ex2(BaseProblem):
    def __init__(self):
        BaseProblem.__init__(self, exampleValue, problemValue)

    def evenValuedFibSum(self, limit):
        debug = False
        sum = 0

        fN1 = 1 # Previous term
        fN2 = 1 # Two terms ago
        fN = fN1 + fN2  # Initialize 3rd term

        while fN < limit:
            if debug:
                print(fN)
            
            if fN % 2 == 0:
                sum += fN
            
            fN2 = fN1
            fN1 = fN
            fN = fN1 + fN2

        return sum

    def run(self, useExampleValue):
        return self.evenValuedFibSum(self.getProblemValue(useExampleValue))
